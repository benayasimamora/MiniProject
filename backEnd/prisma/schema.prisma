generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum user_role {
  CUSTOMER
  ORGANIZER
}

enum Organizer_Status {
  PENDING
  APPROVED
  REJECTED
}

enum Voucher_Status {
  ACTIVE
  USED
  EXPIRED
}

enum point_source {
  REFERRAL
  REFUND
  REDEEM
}

enum transaction_status {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  CONFIRMED
  REJECTED
  EXPIRED
  CANCELED
}

model User {
  id                Int                @id @default(autoincrement())
  full_name         String
  email             String             @unique
  password          String
  role              user_role          @default(CUSTOMER)
  referral_code     String             @unique
  profile_picture   String?
  is_verified       Boolean            @default(false)
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?          @default(now()) @db.Timestamptz(6)
  organizer_profile Organizer_Profile?
  coupons           Coupons[]
  vouchers          Vouchers[]
  points            User_Points?
  referral_made     Referral[]         @relation("referrer")
  referral_used     Referral[]         @relation("referee")
  transactions      Transactions[]
  Event             Event[]
}

model Organizer_Profile {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [user_id], references: [id])
  user_id            Int              @unique
  organization_name  String
  organization_email String
  phone_number       String
  address            String
  website_url        String?
  status_approval    Organizer_Status @default(PENDING)
  submitted_at       DateTime         @default(now()) @db.Timestamptz(6)
  reviewed_at        DateTime?        @db.Timestamptz(6)
  rejection_reason   String?
}

model Referral {
  id          Int       @id @default(autoincrement())
  referrer    User      @relation("referrer", fields: [referrer_id], references: [id])
  referrer_id Int
  referee     User      @relation("referee", fields: [referree_id], references: [id])
  referree_id Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model User_Points {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [user_id], references: [id])
  user_id    Int          @unique
  amount     Int          @default(0)
  source     point_source
  expired_at DateTime     @db.Timestamptz(6)
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
}

model Coupons {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [user_id], references: [id])
  user_id        Int
  code           String         @unique
  discount_value Int
  expired_at     DateTime       @db.Timestamptz(6)
  is_used        Boolean        @default(false)
  created_at     DateTime?      @default(now()) @db.Timestamptz(6)
  Transactions   Transactions[]
}

model Vouchers {
  id             Int            @id @default(autoincrement())
  event          Event          @relation(fields: [event_id], references: [id])
  event_id       Int
  user           User           @relation(fields: [user_id], references: [id])
  user_id        Int
  code           String         @unique
  discount_value Int
  start_date     DateTime       @db.Timestamptz(6)
  end_date       DateTime       @db.Timestamptz(6)
  status         Voucher_Status @default(ACTIVE)
  Transactions   Transactions[]
}

model Event {
  id              Int            @id @default(autoincrement())
  organizer       User           @relation(fields: [organizer_id], references: [id])
  organizer_id    Int
  name            String
  description     String
  category        String
  location        String
  paid            Boolean
  price           Int
  start_date      DateTime       @db.Timestamptz(6)
  end_date        DateTime       @db.Timestamptz(6)
  total_seats     Int
  remaining_seats Int
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  ticket_types    Ticket_Type[]
  reviews         Reviews[]
  transactions    Transactions[]
  vouchers        Vouchers[]
}

model Ticket_Type {
  id                  Int                   @id @default(autoincrement())
  event               Event                 @relation(fields: [event_id], references: [id])
  event_id            Int
  name                String
  price               Int
  quantity            Int
  Transactions_Detail Transactions_Detail[]
}

model Transactions {
  id              Int                   @id @default(autoincrement())
  user            User                  @relation(fields: [user_id], references: [id])
  user_id         Int
  event           Event                 @relation(fields: [event_id], references: [id])
  event_id        Int
  status          transaction_status    @default(WAITING_PAYMENT)
  total_amount    Int
  payment_proof   String?
  used_point      Int                   @default(0)
  user_coupon     Coupons?              @relation(fields: [used_coupon_id], references: [id])
  used_coupon_id  Int?
  used_voucher    Vouchers?             @relation(fields: [used_voucher_id], references: [id])
  used_voucher_id Int?
  created_at      DateTime?             @default(now()) @db.Timestamptz(6)
  details         Transactions_Detail[]
  reviews         Reviews?
}

model Transactions_Detail {
  id             Int          @id @default(autoincrement())
  transaction    Transactions @relation(fields: [transaction_id], references: [id])
  transaction_id Int
  ticket_type    Ticket_Type  @relation(fields: [ticket_type_id], references: [id])
  ticket_type_id Int
  quantity       Int
}

model Reviews {
  id             Int          @id @default(autoincrement())
  transaction    Transactions @relation(fields: [transaction_id], references: [id])
  transaction_id Int          @unique
  event          Event        @relation(fields: [event_id], references: [id])
  event_id       Int
  rating         Int
  comment        String
  created_at     DateTime?    @default(now()) @db.Timestamptz(6)
}
